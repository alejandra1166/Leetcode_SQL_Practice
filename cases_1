--Day 1-1
SELECT product_id
FROM low_fat_products
WHERE lowfat = 'Y' AND
	recyclable = 'Y'

--Day 1-2
SELECT name
FROM customer
WHERE reference_id IS NULL
UNION
SELECT name
FROM customer
WHERE referee_id <> 2

--Day 1-3
SELECT name, population, area
FROM world
WHERE are >= 3000000 OR populations >= 25000000


--Day 1-4
SELECT DISTINCT author_id
FROM the_views
WHERE author_id = viewer_id


--Day 1-5
SELECT *
FROM tweets
WHERE DATALENGHT(content) > 15


--Day 2-1
SELECT unique_id, name
FROM employees
FULL JOIN employee_uni
ON employees.id = employee_uni.id


--Day 2-2
SELECT product_name, year, price
FROM sales as s
LEFT JOIN product as p
ON s.product_id = p.product_id


--Day 2-3
SELECT custimer_id, COUNT(custimer_id) as not_transaction
FROM visits as v
FULL JOIN transactions as t
ON v.visit_id = t.visit_id
WHERE t.transaction_id IS NULL
GROUP BY customer_id
ORDER BY not_transaction DESC


--Day 2-4
WITH cte1 
AS(
SELECT id as idc
	, recorddate
	, LAG(temperature) over (order by recorddate) as temp_comparadas
FROM weather
)
SELECT *
FROM weather as w
JOIN cte1
ON w.recorddate = cte.temp_comparadas
WHERE  w.temperature > cte.temp_comparadas

--Day 2-5
WITH cte1 
AS(
SELECT machine_id
	, timestamp as endtime
	, LAG(timestamp) over (order by machine_id) as starttime
FROM activity
)
SELECT machine_id, SUM(endtime - starttime)/2
FROM cte1
GROUP BY machine_id


--Day 3-1
SELECT name, bonus
FROM rmployee as e
INNER JOIN bonus as b
ON e.empId = b.empId
WHERE bonus < 100

--Day 3-2

SELECT s.student_id, s.student_name, sub.subject_name, COUNT(e.subject_name) AS attended_exams
FROM Students s
CROSS JOIN Subjects sub
LEFT JOIN Examinations e 
ON s.student_id = e.student_id AND sub.subject_name = e.subject_name
GROUP BY s.student_id, s.student_name, sub.subject_name
ORDER BY s.student_id, sub.subject_name;


--Day 3-3
SELECT e.name
FROM employee3_3 e
INNER JOIN
	(SELECT managerId
	FROM employee3_3 
	GROUP BY managerId 
	having count(*) >= 5) m 
ON e.Id = m.managerId

--Day 3-4

SELECT s.user_id, COUNT(IIF(c.action = 'confirmed', c.user_id, null))/CAST(COUNT(*) as decimal(3,2)) AS confirmation_rate			
FROM confirmations as c
FULL JOIN signups as s
ON c.user_id = s.user_id
group by  s.user_id

--another answer-

SELECT user_id, COALESCE(FORMAT(SUM(cases)/COUNT(cases), '.##'), '0+')as confirmation_rate
FROM (
		SELECT sg.user_id, action, (CASE
				when con.action = 'confirmed' then 1+.0 else 0 end)as cases
		FROM Confirmations as con
		right Join Signups as sg
		ON con.user_id = sg.user_id) AS cuentas
group by user_id


--Day 3-5

SELECT * 
FROM CINEMA
WHERE description <> 'boring' AND id % 2 <> 0
order by rating DESC


--Day 4-1


SELECT p.product_id, CAST((SUM(units * price))as float)/SUM(units)
FROM prices AS p
inner JOIN unitssold as u
ON p.product_id = u.product_id
where purchase_date between start_date and end_date
group by p.product_id


--Day 4-2

SELECT project_id, CAST(SUM(experience_years)AS decimal(3,2))/COUNT(*)as avg_years
FROM employee_3 as e
JOIN project as p
on e.employee_id = p.employee_id
group by project_id



	SELECT project_id, CAST(AVG(experience_years +.0) AS DECIMAL(4,2))
    FROM  employee_3 AS e
    INNER JOIN project AS p
      ON e.employee_id = p.employee_id
 GROUP BY project_id

 --Day 4-3

SELECT contest_id, ((COUNT(DISTINCT user_id)/ (select count(user_id)+.0 from users)) * 100) as percentage
from register
group by contest_id
ORDER BY percentage DESC
 
 --Day 4-4

	--quality

SELECT query_name, CAST(AVG(rating/position+.0) AS DECIMAL(4,2)) as queries_quality
FROM queries
group by query_name

--did it by myself

--poor_ query_percentage


SELECT query_name, (COUNT(rating)/((select count(rating)+.0  from queries)))*100
FROM queries
WHERE rating < 3
GROUP BY query_name

select count(rating)
FROM queries
WHERE rating < 3
GROUP BY query_name

---needed a way to add the where into the select...people helped me so


--Final result : 

select query_name, 
		CAST(AVG(rating/position+.0) AS DECIMAL(4,2)) as quality, 
		COUNT(CASE WHEN rating < 3 THEN 1 END) / (COUNT(*) * 1.0) as  poor_query_percentage
from queries
GROUP BY query_name
order by query_name DESC


--Day 4-5

--first, group by

select sum(amount)
from transactions_bank
group by DATEPART(month, trans_date), country

--the number of transactions and their total amount,


select COUNT(id) as trans_count, sum(amount) as trans_total_amount, 
from transactions_bank
group by DATEPART(month, trans_date), country


--Count of approved transactions 
select  country, COUNT(id) as trans_count, sum(amount) as trans_total_amount, COUNT(case when state = 'approved' THEN 1 END) as approved_count
from transactions_bank
group by DATEPART(month, trans_date), country


--total SUM of approved transactions

select  country
		,COUNT(id) as trans_count
		,SUM(amount) as trans_total_amount
		,COUNT(case when state = 'approved' THEN 1 END) as approved_count
		,SUM(case when state = 'approved' THEN amount ELSE 0 END) as approved_total_amount

from transactions_bank
group by DATEPART(month, trans_date), country

--Final result 

select  FORMAT(trans_date, 'MM-yyyy') as months
		,country
		,COUNT(id) as trans_count
		,SUM(amount) as trans_total_amount
		,COUNT(case when state = 'approved' THEN 1 END) as approved_count
		,SUM(case when state = 'approved' THEN amount ELSE 0 END) as approved_total_amount

from transactions_bank
group by FORMAT(trans_date, 'MM-yyyy'), country

--using only format, because it wil give u month 12 abd year 2019 and thats all u need to group by too


--DAY 5-1

--immediate = If the customer's preferred delivery date is the same as the order date  otherwise
--scheduled = otherwise
--The first order of a customer is the order with the earliest order date that the customer made

-- find the percentage of IMMEDIATE orders in the FIRST  orders of all customers, rounded to 2 decimal places.

--+----------------------+
--| immediate_percentage |
--+----------------------+
--| 50.00                |
--+----------------------+



--SELECT * FROM delivery

SELECT customer_id, order_date 
FROM delivery

--getting only te 1st orders


SELECT *
FROM (SELECT customer_id, order_date, customer_pref_delivery_date,RANK() OVER   
    (PARTITION BY customer_id ORDER BY order_date) as ranks
		from delivery) as delivery_rank
where ranks = 1

--doing the math and finding the percentage

SELECT (SUM(CASE WHEN order_date = customer_pref_delivery_date THEN 1 ELSE 0 END)  * 100)/COUNT(customer_pref_delivery_date ) as immediate_percentage

FROM (SELECT customer_id, order_date, customer_pref_delivery_date,RANK() OVER   
    (PARTITION BY customer_id ORDER BY order_date) as ranks
		from delivery) as delivery_rank
where ranks = 1


--Day 5-2
--report the fraction of players that logged in again on the day after the day they first logged in, on other words:
--count the number of players that logged in for at least two consecutive days starting from their first login date, 
--then divide that number by the total number of players.

--+-----------+
--| fraction  |
--+-----------+
--| 0.33      |
--+-----------+


--counting repetitive days

WITH cte1 AS (
SELECT  event_date, DATEADD(d, - ROW_NUMBER() OVER  (ORDER BY event_date), event_date) as prev_date, player_id
FROM activity_players
)

SELECT COUNT(prev_date)
FROM cte1
group by  prev_date

--FINDING THE RESULT

WITH cte1 AS (
SELECT  event_date, DATEADD(d, - ROW_NUMBER() OVER  (ORDER BY event_date), event_date) as prev_date, player_id
FROM activity_players
)

SELECT CAST((CASE WHEN COUNT(prev_date) = 2.0 THEN 1 ELSE 0 END ) AS DECIMAL(4,2))/ (SELECT COUNT(DISTINCT player_id) FROM activity_players)+.0
FROM cte1
group by  prev_date


--Day 5-3

--calculate the number of unique subjects each teacher teaches in the university.

--+------------+-----+
--| teacher_id | cnt |
--+------------+-----+
--| 1          | 2   |
--| 2          | 4   |
--+------------+-----+

-- SELECT * FROM teacher


SELECT teacher_id, COUNT(DISTINCT subject_id) as cnt
FROM teacher
group by teacher_id


--Day 5-4
-- find the daily active user count for a period of 30 days ending 2019-07-27 inclusively.
--A user was active on someday if they made at least one activity on that day.
--+------------+--------------+ 
--| day        | active_users |
--+------------+--------------+ 
--| 2019-07-20 | 2            |
--| 2019-07-21 | 2            |
--+------------+--------------+ 

SELECT activity_date, COUNT(DISTINCT user_id) as active_users
FROM activity_sm
where activity_date BETWEEN Dateadd(day,-30,'2019-07-27') AND  '2019-07-27'
group by activity_date


--Day 5-5

--Write a solution to select the product id, year, quantity, and price for the first year of every product sold.

--+------------+------------+----------+-------+
--| product_id | first_year | quantity | price |
--+------------+------------+----------+-------+ 
--| 100        | 2008       | 10       | 5000  |
--| 200        | 2011       | 15       | 9000  |
--+------------+------------+----------+-------+

--joining 

SELECT sales.product_id,  year, quantity, price
FROM phone_sales as sales
JOIN phone_product as product
ON sales.product_id=product.product_id

--raking products by year

SELECT sale_id, product_id,  year, quantity, price, RANK() OVER (PARTITION BY product_id order by year) ranks
FROM phone_sales

--solving it

SELECT sales.product_id,  year, quantity, price
FROM (
	SELECT sale_id
				, product_id
				,  year
				, quantity
				, price
				, RANK() OVER (PARTITION BY product_id order by year) ranks
	FROM phone_sales
	) as sales
JOIN phone_product as product
ON sales.product_id=product.product_id
where ranks = 1



--Day 6-1

--find all the classes that have at least five students.
--+---------+
--| class   |
--+---------+
--| Math    |
--+---------+

--SELECT * FROM courses

SELECT class
FROM 
	(SELECT COUNT(student) over (partition by class) as counted, class
	FROM courses) as courses_counted
where counted >= 5
group by class

--Day 6-2

--Write a solution that will, for each user, return the number of followers.
--      Return the result table ordered by user_id in ascending order.

--+---------+----------------+
--| user_id | followers_count|
--+---------+----------------+
--| 0       | 1              |
--| 1       | 1              |
--| 2       | 2              |
--+---------+----------------+

--SELECT * FROM followers

SELECT user_id, count(follower_id)
FROM followers
group by user_id
order by user_id


--Day 6-3

----A single number is a number that appeared only once in the MyNumbers table.
--      Find the largest single number. 
--	  If there is no single number, report null.

--+-----+
--| num |
--+-----+
--| 6   |
--+-----+

SELECT MAX(num) as num
FROM (
	select count(*) as counted, num
	from mynumbers
	group by num ) as grouped_num
where counted = 1

--Day 6-4

--Write a solution to report the customer ids from the Customer table that bought all the products in the Product table.
+-------------+
| customer_id |
+-------------+
| 1           |
| 3           |
+-------------+

SELECT * FROM customer_two 
SELECT * FROM product_two

SELECT customer_id
FROM (
		SELECT product_key
				,customer_id
				,rank() over (partition by customer_Id order by product_key) as ranks
		FROM customer_two 
		) as table_ranked
where ranks = 2

--Day 6-5

--we will consider a manager an employee who has at least 1 other employee reporting to them.
--report the ids and the names of all managers,
--the number of employees who report directly to them,
--and the average age of the reports rounded to the nearest integer.
-- Return the result table ordered by employee_id.

+-------------+-------+---------------+-------------+
| employee_id | name  | reports_count | average_age |
+-------------+-------+---------------+-------------+
| 9           | Hercy | 2             | 39          |
+-------------+-------+---------------+-------------+

--select * from employees_4

select one.employee_id, one.name, COUNT(two.employee_id) as reports_to_manager, AVG(two.age) as av_age
from employees_4 as one
JOIN employees_4 as two
ON one.employee_id = two.reports_to
group by one.employee_id, one.name


--Day 7-1

--primary_flag is an ENUM (category) of type ('Y', 'N'). If the flag is 'Y', the department is the primary department for the employee. If the flag is 'N', the department is not the primary.
--Note that when an employee belongs to only one department, their primary column is 'N'

--Report all the employees with their primary department. 
--For employees who belong to one department, report their only department.

--+-------------+---------------+
--| employee_id | department_id |
--+-------------+---------------+
--| 1           | 1             |
--| 2           | 1             |
--| 3           | 3             |
--| 4           | 3             |
--+-------------+---------------+

--SELECT * FROM employees_5

SELECT employee_id, department_id
FROM (
	SELECT employee_id
		, COUNT(primary_flag) over (partition by employee_id) as numb_departments
		, department_id
		, primary_flag
	FROM employees_5
	) AS employees 
WHERE numb_departments = 1 OR primary_flag = 'Y'


--Day 7-2

--Report for every three line segments whether they can form a triangle.
--the sum of the lengths of any two sides of a triangle is always greater than the length of the third side

--+----+----+----+----------+
--| x  | y  | z  | triangle |
--+----+----+----+----------+
--| 13 | 15 | 30 | No       |
--| 10 | 20 | 15 | Yes      |
--+----+----+----+----------+

SELECT x, y, z, CASE
				WHEN X + Y >= z
				THEN 'Yes'
				ELSE 'No'
				END as triangle
FROM triangle


--Day 7-3

--Find all numbers that appear at least three times consecutively.

--+-----------------+
--| ConsecutiveNums |
--+-----------------+
--| 1               |
--+-----------------+

WITH cte1 as (
SELECT id
	, num
	, LAG(num) over (order by id)as lag_num
	, LEAD(num) over (order by id) as lead_num
FROM logs
)

SELECT num as ConsecutiveNums
from cte1
where num = lag_num 
		AND
		num = lead_num


--Day 7-4


--find the prices of all products on 2019-08-16
--Assume the price of all products before any change is 10.


--+------------+-------+
--| product_id | price |
--+------------+-------+
--| 2          | 50    |
--| 1          | 35    |
--| 3          | 10    |
--+------------+-------+ output

--Select * from products_3

WITH cte1 AS(
SELECT *, ROW_NUMBER() OVER (PARTITION BY product_id order by product_id DESC) AS row_num
FROM (
	Select TOP 4 *
	FROM products_3
	ORDER BY product_id DESC
	) as products
)

SELECT product_id, 
		CASE WHEN change_date <= '2019-08-16' THEN new_price ELSE 10 end as price
FROM cte1
where row_num = 1

--Day 7-5


--turn determines the order of which the people will board the bus
 --the bus has a weight limit of 1000 kilograms

-- find the person_name of the last person that can fit on the bus without exceeding the weight limit. 
--The test cases are generated such that the first person does not exceed the weight limit.
--+-------------+
--| person_name |
--+-------------+
--| John Cena   |
--+-------------+


--SELECT * FROM queue_1

SELECT person_name
FROM (
	SELECT *, SUM(weight) over(order by turn) as running_sum
	FROM queue_1
	) as weight_sum
where running_sum = 1000


--Day 8-1

(SELECT 'Low Salary' as category, 
								(select count(*)  
								from Accounts 
								where income < 20000) as accounts_count)
union all

(select 'Average Salary' as category,
									(select count(*) 
									from Accounts 
									where income >= 20000 and income <= 50000) as accounts_count)

union all 

(select 'High Salary' as category,
								(select count(*)
								from Accounts 
								where income > 50000) as accounts_count)





								SELECT cat_table.category, COALESCE(COUNT(q.category), 0) accounts_count 
FROM (
    SELECT 
        CASE WHEN income < 20000 THEN 'Low Salary' 
            WHEN income >= 20000 AND income <= 50000 THEN 'Average Salary'
            WHEN income > 50000 THEN 'High Salary' END category
    FROM Accounts
	) AS q
RIGHT JOIN 
		(SELECT 'Low Salary' AS category
		UNION ALL 
		SELECT 'Average Salary' 
		UNION ALL 
		SELECT 'High Salary') AS cat_table 
ON q.category = cat_table.category
GROUP BY cat_table.category



--Day 8-2

SELECT b.employee_id
FROM employees_6 as a
JOIN employees_6 as b
ON a.manager_id = b.employee_id
WHERE a.salary < 30000


--Mejor solucion 

SELECT *
FROM employees_6
where manager_id  NOT in (SELECT employee_id FROM employees_6)

--Day 8-3

SELECT ID, 
		ISNULL(CASE WHEN id % 2 = 0 
		THEN LAG(student) OVER (ORDER BY ID) 
		ELSE LEAD(student) OVER (ORDER BY ID) 
		END, student) AS student
FROM table_seats



--Day 8-4

--Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
--Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.

--+--------------+
--| results      |
--+--------------+
--| Daniel       |
--| Frozen 2     |
--+--------------+

--SELECT * FROM movies
--SELECT * FROM users_movies
--SELECT * FROM movie_rating

--first try 
WITH CTE1 AS (
	SELECT TOP 1 max(num_ratings) as ratings, user_id
	FROM (
		SELECT user_id, COUNT(user_id) as num_ratings
		FROM movie_rating
		group by user_id ) as counts
	group by user_id
	order by user_Id
)

SELECT users.name
FROM CTE1
JOIN users_movies as users
ON CTE1.user_id = users.user_id

--second

SELECT TOP 1  count(rating.user_id)num_rates, name
FROM users_movies as movies
	JOIN movie_rating as rating
	ON movies.user_id = rating.user_id
group by name
order by num_rates desc, name

SELECT TOP 1 AVG(rating) avg_rating, title
FROM movies
	JOIN movie_rating as rating
	ON movies.movie_id = rating.movie_id
WHERE created_at between '2020-01-01' and '2020-12-31'
group by title
order by  avg_rating desc, title 

--uniendo las dos

SELECT TOP 1  count(rating.user_id)num_rates, users.name, AVG(rating) avg_rating, title
FROM users_movies as users
	JOIN movie_rating as rating
	ON users.user_id = rating.user_id
	JOIN movies
	ON movies.movie_id = rating.movie_id
WHERE created_at between '2020-01-01' and '2020-12-31'
group by name, title
order by num_rates desc, name, avg_rating desc, title 

--Y para q sea solo en una columna 

	WITH cte1 as(

SELECT TOP 1  count(rating.user_id)num_rates, users.name, AVG(rating) avg_rating, title
FROM users_movies as users
	JOIN movie_rating as rating
	ON users.user_id = rating.user_id
	JOIN movies
	ON movies.movie_id = rating.movie_id
WHERE created_at between '2020-01-01' and '2020-12-31'
group by name, title
order by num_rates desc, name, avg_rating desc, title )

select name as results
from cte1
UNION
select title as results
from cte1


--Day 8-5

--Compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before).
--bc: 1st moving average from 2019-01-01 to 2019-01-07 has an average_amount of (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86
--+--------------+--------------+----------------+
--| visited_on   | amount       | average_amount |
--+--------------+--------------+----------------+
--| 2019-01-07   | 860          | 122.86         |
--| 2019-01-08   | 840          | 120            |
--| 2019-01-09   | 840          | 120            |
--| 2019-01-10   | 1000         | 142.86         |
--+--------------+--------------+----------------+

--sumando amounts
SELECT DISTINCT  visited_on, SUM(amount) OVER (ORDER BY visited_on
										ROWS 6 PRECEDING ) as AMOUNT

FROM (SELECT visited_on, SUM(amount)as amount
		FROM customer_3
		group by visited_on) as customers

--sacando avg

SELECT DISTINCT  visited_on, 
				SUM(amount) OVER (ORDER BY visited_on ROWS 6 PRECEDING ) as sum_amount,
				AVG(amount) OVER (ORDER BY visited_on ROWS 6 PRECEDING ) as avg_amount

FROM (SELECT visited_on, SUM(amount)as amount
		FROM customer_3
		group by visited_on) as customers

--mostrando solo 7 en adelante

WITH cte1 AS(
SELECT DISTINCT  visited_on, 
				SUM(amount) OVER (ORDER BY visited_on ROWS 6 PRECEDING ) as sum_amount,
				AVG(amount) OVER (ORDER BY visited_on ROWS 6 PRECEDING ) as avg_amount

FROM (SELECT visited_on, SUM(amount)+0.0 as amount
		FROM customer_3
		group by visited_on) as customers
	) 

	SELECT *
	FROM cte1 
	WHERE visited_on >= '2019-01-07'

	
--Day 9-1


WITH cte1 AS (

SELECT id, SUM(counting) as num
FROM (
		SELECT distinct accepter_id AS ID, 
				COUNT(accepter_id) over(partition by accepter_id order by accepter_id) as counting
		FROM request_acepted
		union
		SELECT distinct requester_id AS ID, 
				COUNT(requester_id) over(partition by requester_id order by requester_id) as counting
		FROM request_acepted
		) as uni
		group by ID
		)

SELECT TOP 1 id, num
FROM cte1
order by num DESC

	
--Day 9-2


--pid is the policyholder's policy ID.
--tiv_2015 is the total investment value in 2015 and tiv_2016 is the total investment value in 2016.
--lat is the latitude of the policy holder's city. It's guaranteed that lat is not NULL.
--lon is the longitude of the policy holder's city. It's guaranteed that lon is not NULL.

--report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:

----have the same tiv_2015 value as one or more other policyholders, and
----are not located in the same city as any other policyholder (i.e., the (lat, lon) attribute pairs must be unique).

--output
--+----------+
--| tiv_2016 |
--+----------+
--| 45.00    |
--+----------+

--doing the counts for each requirement

select pid, tiv_2015, COUNT( tiv_2015) over (partition by tiv_2015 order by tiv_2015) as tiv_count, 
		COUNT( lat)over (partition by lat order by lat) as lat_count,
		COUNT( lon)over (partition by lon order by lon) as lat_count
from insurance

--sum


SELECT SUM(tiv_2016) as tiv_2016
FROM (
	select pid, 
			tiv_2016, 
			COUNT( tiv_2015) over (partition by tiv_2015 order by tiv_2015) as tiv_count, 
			COUNT( lat)over (partition by lat order by lat) as lat_count,
			COUNT( lon)over (partition by lon order by lon) as lon_count
from insurance
	)AS cuenta
WHERE lat_count = 1 
	AND
	lon_count = 1
	and 
	tiv_count > 1

--Day 9-3

--A high earner in a department is an employee who has a salary in the top three unique salaries for that department.

--Write a solution to find the employees who are high earners in each of the departments.

--output
--+------------+----------+--------+
--| Department | Employee | Salary |
--+------------+----------+--------+
--| IT         | Max      | 90000  |
--| IT         | Joe      | 85000  |
--| IT         | Randy    | 85000  |
--| IT         | Will     | 70000  |
--| Sales      | Henry    | 80000  |
--| Sales      | Sam      | 60000  |
--+------------+----------+--------+

--SELECT * FROM employees_7
--SELECT * FROM department

--ranking to get the top 3 of each

 SELECT rank() OVER(PARTITION BY departmentid ORDER BY salary DESC) as ranks, SALARY
FROM employees_7

--solving

SELECT department.name, employees.name, salary
FROM ( SELECT Rank() OVER(PARTITION BY departmentid ORDER BY salary DESC) as ranks
		, SALARY
		, name
		, departmentid
	FROM employees_7 ) as employees
JOIN department
ON employees.departmentid = department.id
where ranks in (1, 2, 3, 4)

--Day 9-4

-- fix the names so that only the first character is uppercase and the rest are lowercase.
--Return the result table ordered by user_id.

--+---------+-------+
--| user_id | name  |
--+---------+-------+
--| 1       | Alice |
--| 2       | Bob   |
--+---------+-------+

--SELECT * FROM users_bad_writing

SELECT user_id, UPPER(SUBSTRING(name,1,1)) + LOWER(SUBSTRING(name,2,10))AS name
FROM users_bad_writing
order by user_id

--Day 9-5

SELECT *
FROM patients
where conditions like '%DIAB1%'

--Dia 10-1

--INSERT INTO person VALUES
--(1, 'john@example.com'),
--(2, 'bob@example.com'),
--(3, 'john@example.com');


-- delete all duplicate emails, keeping only one unique email with the smallest id.
--For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.
--For Pandas users, please note that you are supposed to modify Person in place.
--output
--+----+------------------+
--| id | email            |
--+----+------------------+
--| 1  | john@example.com |
--| 2  | bob@example.com  |
--+----+------------------+

DELETE Person FROM (SELECT id, EMAIL, RANK() OVER(partition by email order BY id) as Ranks
				from person
				) Person 
WHERE Ranks >= 2


--10-2
WITH cte1 AS(
SELECT salary, Rank() over(order by salary) as Ranks
FROM employee_8
)
SELECT Salary as SecondHighesSalary
FROM cte1
Where ranks =2


--10-3

-- find for each date the number of different products sold and their names.
--The sold products names for each date should be sorted lexicographically.
--Return the result table ordered by sell_date.

--output
--+------------+----------+------------------------------+
--| sell_date  | num_sold | products                     |
--+------------+----------+------------------------------+
--| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |
--| 2020-06-01 | 2        | Bible,Pencil                 |
--| 2020-06-02 | 1        | Mask                         |
--+------------+----------+------------------------------+

--SELECT * FROM activities

--string_agg y count


SELECT sell_date, count(distinct product) as counts, 
FROM activities
GROUP BY sell_date


SELECT STRING_AGG(product, ',')  WITHIN GROUP ( ORDER BY product)
FROM activities

--result


WITH cte1 AS(

SELECT sell_date
		, count(distinct product) as num_sold
		, rank() over (order by sell_date) as ranks
FROM activities
GROUP BY sell_date
)
SELECT cte1.sell_date
		, num_sold
		, STRING_AGG((CASE 
						WHEN ranks = 1 THEN product 
						WHEN ranks = 2 THEN product
						WHEN ranks = 3 THEN product else null
						end ),  ',')  WITHIN GROUP ( ORDER BY product)
FROM cte1
JOIN activities 
on cte1.sell_date = activities.sell_date
group by cte1.sell_date, num_sold


--Day 10-4

-- get the names of products that have at least 100 units ordered in February 2020 
--and their amount.

--output
--+--------------------+---------+
--| product_name       | unit    |
--+--------------------+---------+
--| Leetcode Solutions | 130     |
--| Leetcode Kit       | 100     |
--+--------------------+---------+

WITH cte1 AS (
SELECT product_id,
		SUM(unit) as uni
FROM orders 
where order_date between '2020-02-01' and '2020-02-29' 
group by product_id
)

SELECT product_name, uni
FROM cte1
JOIN products_4 as p
on cte1.product_id = p.product_id
where uni >= 100


--Day 10-5

--find the users who have valid emails.
--A valid e-mail has a prefix name and a domain where:

--The prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. 
--The prefix name must start with a letter.
--The domain is '@leetcode.com'.

--output
--+---------+-----------+-------------------------+
--| user_id | name      | mail                    |
--+---------+-----------+-------------------------+
--| 1       | Winston   | winston@leetcode.com    |
--| 3       | Annabelle | bella-@leetcode.com     |
--| 4       | Sally     | sally.come@leetcode.com |
--+---------+-----------+-------------------------+

--SELECT * FROM users_web

SELECT mail 
FROM users_web
where 
	mail  like '%[a-z][-._[0-9]%@' or
	mail  like '[A-z]%@leetcode.com' and
	mail  not like '%#%'


